#!/usr/bin/env node

const fs = require('fs-extra');
const program = require('commander');
const hl = require('../');
const {URL} = require('url');

function collect(value, previous) {
  return previous.concat([value]);
}

program
  .command('create')
  .alias('c')
  .description('Create a hashlink given a URL and/or data.')
  .option('-u, --url <location>', 'target URL for the hashlink', collect, [])
  .option('-l, --legacy', 'create a hashlink for a legacy URL')
  .option('-h, --hash <algorithm>', 'cryptographic hash algorithm', 'sha2-256')
  .option('-b, --base <encoding>', 'base encoding', 'base58-btc')
  .action(async (dataFile, options) => {
    try {
      let data, urls, transforms, meta = undefined;
      // read data from disk if provided
      if(dataFile) {
        data = fs.readFileSync(dataFile, null);
      }
      if(options.url.length > 0) {
        urls = options.url;
      }
      // generate transforms from command line options
      transforms = ['mh-' + options.hash, 'mb-' + options.base];
      const hashlink = await hl.create({data, urls, transforms, meta});

      if(options.legacy) {
        // print out a legacy hashlink
        const rawHashlink = hashlink.split(':')[1];
        options.url.forEach(inputUrl => {
          const outputUrl = new URL(inputUrl);
          outputUrl.searchParams.set('hl', rawHashlink);
          console.log(outputUrl.toString());
        });
      } else {
        // print out the hashlink
        console.log(hashlink);
      }
    } catch(e) {
      console.error(`${e}`);
      process.exit(1);
    }
  })
  .on('--help', () => {
    console.log();
    console.log('  Examples: ');
    console.log();
    console.log('    hl create hw.txt');
    console.log('    hl create --url "https://example.com/hw.txt"');
    console.log('    hl create --url "https://example.com/hw.txt" hw.txt');
    console.log();
  });

  program
    .command('verify')
    .alias('v')
    .description('Verify a hashlink.')
    .option('-u, --url <location>', 'target URL for the hashlink')
    .option('-f, --file <data>', 'load data to hash from specified file')
    .action(async (hashlink, options) => {
      try {
        let data, urls, transforms, meta = undefined;
        // read data from disk if provided
        if(options.file) {
          data = fs.readFileSync(options.file, null);
        }
        if(options.url) {
          urls = options.url;
        }
        // check to see if hashlink is valid
        const valid = await hl.verify({data, hashlink});
        if(valid) {
          console.log('hashlink is valid');
        } else {
          throw new Error('hashlink is invalid');
        }
      } catch(e) {
        console.error(`${e}`);
        process.exit(1);
      }
    })
    .on('--help', () => {
      console.log();
      console.log('  Examples: ');
      console.log();
      console.log('    hl verify --file hw.txt');
      console.log('    hl verify --url "https://example.com/hw.txt"');
      console.log();
    });

program.parse(process.argv);
